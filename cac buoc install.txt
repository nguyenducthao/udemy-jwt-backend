npm install --save-exact express@4.17.2 dotenv@10.0.0 body-parser@1.19.1 ejs@3.1.6

tạo folder src

tạo file server.js trong thư mục src

tạo folder configs trong thư mục src

tạo folder controllers trong thư mục src

tạo folder services trong thư mục src

tạo folder public trong thư mục src

tạo folder views trong thư mục src

tạo folder models trong thư mục src

tạo folder routes trong thư mục src

tạo file .gitignore và thêm vào nội dung:

tạo file .babelrc

tạo file .env

thêm vào file .gitignore nội dung:
    .evn
    node_modules
    node_modules/*

npm install --save-exact @babel/core@7.15.4 @babel/node@7.15.4 @babel/preset-env@7.15.4 nodemon@2.0.15

thêm vào file .babelrc nội dung:
    {
        "presets":[
            "@babel/preset-env"
        ]
    }

tạo file src/configs/viewEngine.js với nội dung sau:
    import express from "express"
    /**
    * 
    * @param {*} app: express app
    */
    const configViewEngine = (app) => {
        app.use(express.static('./src/public')) //cho phép trình duyệt truy cập vào folder public
        app.set("view engine", "ejs") // dịch ejs thành html
        app.set("views", "./src/views") // thư mục chứa các tập tin hiển thị trên trình duyệt
    }

    export default configViewEngine

tạo file src/routes/web.js với nội dung sau:
    import express from "express";
    import { append } from "express/lib/response";
    const router = express.Router()
    const initWebRoutes = (app) => {
        router.get("/", (req, res) => {
            return res.send("Hello world")
        })
        return app.use("/", router)
    }
    export default initWebRoutes

thêm vào file server.js nội dung:
    import express from "express";
    import configViewEngine from "./configs/viewEngine";
    import initWebRoutes from "./routes/web";
    const app = express()
    configViewEngine(app)
    initWebRoutes(app)
    const PORT = 8080
    app.listen(PORT, () => {
        console.log('>>> JWT Backend is running on the port = ', PORT)
    })

thêm vào file package.json trong thẻ "script" nội dung sau:
    "start": "nodemon --exec babel-node src/server.js"

gõ lệnh npm start trong terminal để chạy server

mở trình duyệt, vào địa chỉ localhost:8080

thêm vào file .env nội dung sau:
    PORT = 8080

sửa file server.js với nội dung sau:
    thêm: require("dotenv").config()
    sửa const PORT = 8080 thành const PORT = process.env.PORT || 8080

sửa file web.js với nội dung sau:
    tạo hàm handleHelloWord trước hàm initWebRoutes với nội dung:
        const handleHelloWord=(req,res)=>{
            return res.send("Hello word")
        }
    sửa đoạn code: 
        router.get("/", (req, res) => {
            return res.send("Hello world")
            })
        thành:
             router.get("/", handleHelloWord)

tạo file controllers/homeController.js với nội dung sau:
    cắt và dán hàm handleHelloWord trong file web.js vào file này
    thêm đoạn code sau:
        module.exports = {
            handleHelloWord
        }

mở file web.js, thêm vào dòng sau:
    import homeController from './/../controllers/homeController'

mở file web.js:
    sửa: router.get("/", handleHelloWord)
    thành: router.get("/", homeController.handleHelloWord)

tạo file views/home.ejs với nội dung sau:
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
    </head>

    <body>
        <h1>Hello word from ejs view</h1>
    </body>

    </html>

mở file homeController.js:
    sửa: return res.send("Hello word")
    thành: return res.render("home.ejs")

npm install --save-exact mysql2@2.3.3

npm install --save-exact bcryptjs@2.4.3

npm install --save-exact body-parser@1.19.1

mở file server.js:
    thêm dòng: import bodyParser from "body-parser"
    thêm sau dòng configViewEngine(app):
        //config body-parser middleware
        app.use(bodyParser.json())
        app.use(bodyParser.urlencoded({ extended: true }))

thêm vào đầu file homeController.js:
    import mysql from "mysql2"
    const connection = mysql.createConnection({
        host: 'localhost',
        user: 'root',
        password: 'root',
        database: 'udemy-jwt-backend'
    })

npm install --save-exact bluebird@3.7.2

npm install --save-exact sequelize@6.13.0 sequelize-cli@6.3.0

đổi tên thư mục src/configs thành src/config

tạo file .sequelizerc với nội dung sau:
    const path = require('path');
    module.exports = {
        'config': path.resolve('./src/config', 'config.json'),
        'migrations-path': path.resolve('./src', 'migrations'),
        'models-path': path.resolve('./src', 'models'),
        'seeders-path': path.resolve('./src', 'seeders')
    }

mở Git Bash Here tại thư mục của project và chạy dòng lệnh sau để khởi tạo sequelize:
    node_modules/.bin/sequelize init

tạo file src/config/connectDB.js với nội dung sau:
    const { Sequelize } = require('sequelize');

    const sequelize = new Sequelize('udemy-jwt-backend', 'root', 'root', {
        host: 'localhost',
        dialect: 'mysql'
    });

    const connection = async () => {
        try {
            await sequelize.authenticate();
            console.log('Connection has been established successfully.');
        } catch (error) {
            console.error('Unable to connect to the database:', error);
        }
    }
    export default connection

mở Git Bash Here tại thư mục của project và chạy dòng lệnh sau để khởi tạo model:
    npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string

xóa table users trong database

sửa file src/models/user.js theo cấu trúc của table users đã xóa - phần User.init (ko cần thêm trường id)

sửa file src/migrations/xxx-create-user.js theo cấu trúc của table users đã xóa (ko cần thêm trường id)

mở Git Bash Here tại thư mục của project và chạy dòng lệnh sau để tạo table trong database (ghi model vào database):
    npx sequelize-cli db:migrate

mở Git Bash Here tại thư mục của project và chạy dòng lệnh sau để tạo dữ liệu fake (dữ liệu mẫu - nếu cần thiết):
    npx sequelize-cli seed:generate --name demo-user


sửa file src/seeders/xxx-demo-user.js (trong hàm up) theo cấu trúc của table users đã xóa để chuẩn bị tạo dữ liệu fake

mở Git Bash Here tại thư mục của project và chạy dòng lệnh sau để tạo dữ liệu fake (ghi xxx-demo-user.js vào database):
    npx sequelize-cli db:seed:all

thêm dòng sau vào đầu file userService.js để kết nối database thông qua biến db trong file src/models/index.js:
    import db from '../models/index'

sửa hàm createNewUser trong file userService.js với nội dung sau để sử dụng sequelize ghi vào database:
    const createNewUser = async (email, password, username) => {
        try {
            let hashPass = hashUserPassword(password)
            await db.User.create({
                email: email,
                password: password,
                username: username
            })
        } catch (e) {
            console.log(e)
        }
    }

nếu muốn ko hiển thị câu lệnh được thực thi của sequelize tại terminal thì thêm dòng lệnh sau vào file src/config/config.json:
    "logging":false

sửa hàm deleteUser trong file userService.js với nội dung sau để sử dụng sequelize xóa 1 dòng vào database:
    const deleteUser = async (id) => {
        await db.User.destroy({
            where: {
                id: id
            }
        })
    }

npm install --save-exact jsonwebtoken@8.5.1 cookie-parser@1.4.6

tạo file src/middleware/JWTAction.js

thêm vào file .env
    JWT_SECRET = ndthaodng@gmail.com

